#!/usr/bin/env python3
"""
Teste simples para verificar se o Railway consegue executar o sistema.
Este arquivo n√£o depende de banco de dados.
"""

import os
import time
import schedule
from datetime import datetime

def test_post():
    """Fun√ß√£o de teste que simula a cria√ß√£o de um post."""
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{current_time}] TESTE: Post autom√°tico executado com sucesso!")
    print(f"[{current_time}] Vari√°veis dispon√≠veis:")
    print(f"  - OPENAI_API_KEY: {'‚úÖ Configurada' if os.getenv('OPENAI_API_KEY') else '‚ùå N√£o encontrada'}")
    print(f"  - INSTAGRAM_ACCESS_TOKEN: {'‚úÖ Configurada' if os.getenv('INSTAGRAM_ACCESS_TOKEN') else '‚ùå N√£o encontrada'}")
    print(f"  - RAILWAY_ENVIRONMENT: {os.getenv('RAILWAY_ENVIRONMENT', 'N√£o encontrada')}")
    return True

def main():
    """Fun√ß√£o principal que configura o scheduler de teste."""
    print("üöÄ Iniciando sistema de teste no Railway...")
    print(f"‚è∞ Hor√°rio atual: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Configurar um teste a cada 5 minutos
    schedule.every(5).minutes.do(test_post)
    
    # Executar um teste imediatamente
    test_post()
    
    print("üìÖ Scheduler configurado - teste a cada 5 minutos")
    print("üîÑ Entrando no loop principal...")
    
    loop_count = 0
    while True:
        loop_count += 1
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # Log a cada 10 itera√ß√µes (aproximadamente a cada 10 minutos)
        if loop_count % 10 == 1:
            print(f"[{current_time}] Sistema ativo - Loop #{loop_count}")
            print(f"[{current_time}] Pr√≥ximos testes agendados: {len(schedule.jobs)} jobs")
        
        # Executar tarefas pendentes
        schedule.run_pending()
        
        # Aguardar 1 minuto
        time.sleep(60)

if __name__ == "__main__":
    main()